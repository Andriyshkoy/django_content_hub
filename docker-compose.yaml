services:
  web:
    build: .
    container_name: contenthub_web
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    env_file: .env
    volumes:
      - staticfiles:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: contenthub_nginx
    depends_on:
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - staticfiles:/static:ro
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: contenthub_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: contenthub_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  worker:
    build: .
    container_name: contenthub_worker
    command: celery -A config worker -l info -Q celery,batch
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  beat:
    build: .
    container_name: contenthub_beat
    command: celery -A config beat -l info
    env_file: .env
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  pg_data:
  staticfiles:
